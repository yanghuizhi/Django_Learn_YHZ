"""
Django settings for Django_Learn_YHZ project.

Generated by 'django-admin startproject' using Django 2.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '961z-+!jaq)o(i7k3!u!er)gj6d4w3eofwtp^vys&z%sgmvoq='

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# 域名访问权限, 当debug为false时，必须要设置域名权限
ALLOWED_HOSTS = []
# ALLOWED_HOSTS = ["*"]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',           # 管理后台
    'django.contrib.auth',            # 身份验证系统
    'django.contrib.contenttypes',    # 内容类型框架
    'django.contrib.sessions',        # 会话框架
    'django.contrib.messages',        # 消息框架
    'django.contrib.staticfiles',     # 管理静态文件的框架

    'widget_tweaks', # 更好的控制渲染的处理
    'django.contrib.humanize',  # 内置的人性化
    'app_blog', # 注册 blog 应用

    'app_test', # 测试类
    
    'app_boards',
    'app_accounts', # 拆解上一个系统，独立登录系统
]


# middleware 中间件
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',  # csrf警告
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# 根路由配置
ROOT_URLCONF = 'Django_Learn_YHZ.urls'

# 注册静态网页地址
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.media',  # 添加 media 模板第一步
            ],
            # 为了 gravatar 添加的
        # 'libraries':{
        #         'gravatar': 'main.templatetags.gravatar',
        #     }
        },
    },
]


WSGI_APPLICATION = 'Django_Learn_YHZ.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases


DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# 或者采用 mysql，代码如下
# DATABASES = {
#    'default': {
#        'ENGINE': 'django.db.backends.mysql',
#        'NAME': '。。。',           # 你的数据库名称
#        'USER': 'root',            # 你的数据库用户名
#        'PASSWORD': '123456',      # 你的数据库密码
#        'HOST': '',                # 你的数据库主机，留空默认为localhost
#        'PORT': '3306',            # 你的数据库端口
#    }
# }

# # Redis 配置
# # 在Django框架中经常使用redid来保存我们的session值。
# # 如何配置用我们的redis数据库来储存我们的session？
# # 首先在虚拟环境中安装包：pip install django-redis-session==0.5.6
# # 需要在settings.py中配置:
# # 你使用的主要数据库还是mysql数据库，只是单独的session保存在sredis数据库中。
# # 设置redis储存session
# SESSION_ENGINE = 'redis_session.session'
# # ip地址
# SESSION_REDIS_HOST = 'localhost'
# # 端口号
# SESSION_REDIS_PORT = 6379
# # 那个数据库
# SESSION_REDIS_DB = 2
# # 密码，我们没有设置密码
# SESSION_REDIS_PASSWORD = ''
# # session的标识码
# SESSION_REDIS_PREFIX='session'
# # 在Django中读取和设置session都还是一样的，没有区别


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

# LANGUAGE_CODE = 'en-us'       # 默认英文
# TIME_ZONE = 'UTC'

LANGUAGE_CODE = 'zh-hans'       # 中文、时区
TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'

# 配置静态文件路径
STATICFILES_DIRS = (
      os.path.join(BASE_DIR, 'static'),
    )

# 配置 media第二步路径，存放用户上传的图片资料等
MEDIA_URL = '/matem/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'matem')


# setting配置三步走
# 1、注册APP，（INSTALLED_APPS）
# 2、配置模版路径，（新版django已默认配置）
# 3、配置静态文件，（需要手动配置路径）

# 变量指定了一个URL模型的名称，以告诉Django当用户退出登录之后跳转的地址。
LOGOUT_REDIRECT_URL = 'home'

# 邮件
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
# 重定向登录界面
LOGIN_URL = 'login'